AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Instance Watcher Stack - https://zoph.io
###########################################################
Parameters:
###########################################################
  Env:
    Type: String
    Default: dev
    Description: Environment Name
  AWSRegion:
    Type: String
    Default: eu-west-1
    Description: AWS Region
  CronSchedule:
    Type: String
    Description: Cron Schedule
  CustomTags:
    Type: String
    Description: CustomTags for reporting
  Recipients:
    Type: String
    Default: john@doe.com
    Description: List of recipients
  Sender:
    Type: String
    Default: no-reply@doe.com
    Description: Sender
  Project:
    Type: String
    Default: instance-watcher
    Description: Project Name
  EnableMail:
    Type: Number
    Default: 1
    Description: Activate Email Notification
  WhitelistTag:
    Type: String
    Default: watcher
    Description: Whitelist Tag Key
  EnableSlack:
    Type: Number
    Default: 0
  SlackWebHook:
    Type: String
    Default: "not set"
    Description: Slack WebHook URL
  EnableTeams:
    Type: Number
    Default: 0
  TeamsWebHook:
    Type: String
    Default: "not set"
    Description: Microsoft Teams WebHook URL

###########################################################
Resources:
###########################################################
  InstanceWatcherFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub ${Project}-${Env}
      Description: Instance Watcher - Monitor Instances mistakenly left running (Multi-Region)
      Handler: handlers.main
      Runtime: python3.7
      CodeUri: ./build
      MemorySize: 256
      Timeout: 300
      Environment:
        Variables:
          Recipients: !Ref Recipients
          Sender: !Ref Sender
          AWSRegion: !Ref AWSRegion
          EnableMail: !Ref EnableMail
          WhitelistTag: !Ref WhitelistTag
          EnableSlack: !Ref EnableSlack
          SlackWebHook: !Ref SlackWebHook
          EnableTeams: !Ref EnableTeams
          TeamsWebHook: !Ref TeamsWebHook
          CronSchedule: !Ref CronSchedule
          CustomTags: !Ref CustomTags
          Environment: !Ref Env
      Policies:
        - AWSLambdaExecute # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
              - ce:GetCostAndUsage
              - ce:GetCostForecast
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:DescribeRegions
              - glue:GetDevEndpoints
              - glue:GetTags
              - iam:GetRole
              - iam:ListAccountAliases
              - rds:DescribeDBInstances
              - rds:ListTagsForResource
              - redshift:DescribeClusters
              - sagemaker:ListNotebookInstances
              - sagemaker:ListTags
              - ses:SendEmail
              Resource: '*'
      Events:
        Timer:
          Type: Schedule
          Properties:
            Name: !Sub instance-watcher-schedule-${Env}
            Schedule: !Sub cron(${CronSchedule})
      Tags:
        Project: !Ref Project
        CloudFormation: "True"
        Information: "github.com/zoph-io/instance-watcher"

  InvokConfigIW:
    Type: AWS::Lambda::EventInvokeConfig
    Properties: 
      FunctionName: !Ref InstanceWatcherFunction
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${Project}-${Env}"
      RetentionInDays: 30

  CloudWatchLogsMetricsFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: 'ERROR'
      LogGroupName: !Sub "/aws/lambda/${Project}-${Env}"
      MetricTransformations: 
        -
          MetricValue: "1"
          MetricNamespace: !Sub "InstanceWatcher-${Env}"
          MetricName: "ERROR"
          DefaultValue: 0
    DependsOn: LambdaLogGroup

  ErrorAlarm:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - !Ref AlertingTopic
        AlarmDescription: >
          Alarm for ERROR on Instance-Watcher Lambda function
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        MetricName: ERROR
        Namespace: !Sub "InstanceWatcher-${Env}"
        OKActions:
          - !Ref AlertingTopic
        Period: 10
        Statistic: Sum
        Threshold: 1
        TreatMissingData: ignore

  AlertingTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub "Alarm Topic for Instance-Watcher - ${Env}"
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Protocol: email
          Endpoint: !Select [0, !Split [" ", !Ref Recipients]]